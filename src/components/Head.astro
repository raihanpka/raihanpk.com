---
import '../styles/global.css'
import '../styles/katex.css'

import { SITE } from '@/consts'
import { ClientRouter } from 'astro:transitions'
import SpeedInsights from '@vercel/speed-insights/astro'
import { getCriticalCSS } from '../lib/critical-css'

interface Props {
  title: string
  description: string
  image?: string
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const { title, description, image = '/static/twitter-card.png' } = Astro.props

// Inline critical CSS
const criticalCSS = await getCriticalCSS()
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="generator" content={Astro.generator} />

{/* Preconnect to external domains */}
<link rel="preconnect" href="https://cloud.umami.is" />
<link rel="preconnect" href="https://vitals.vercel-insights.com" />
<link rel="dns-prefetch" href="https://cloud.umami.is" />
<link rel="dns-prefetch" href="https://vitals.vercel-insights.com" />

{/* Preload critical fonts with font-display: swap */}
<link 
  rel="preload" 
  href="/fonts/GeistVF.woff2" 
  as="font" 
  type="font/woff2" 
  crossorigin
  onload="this.onload=null;this.rel='font'"
/>
<link 
  rel="preload" 
  href="/fonts/GeistMonoVF.woff2" 
  as="font" 
  type="font/woff2" 
  crossorigin
  onload="this.onload=null;this.rel='font'"
/>

{/* Add font-face with font-display: swap */}
<style is:inline>
  @font-face {
    font-family: 'Geist';
    src: url('/fonts/GeistVF.woff2') format('woff2');
    font-display: swap;
    font-weight: 100 900;
  }
  @font-face {
    font-family: 'Geist Mono';
    src: url('/fonts/GeistMonoVF.woff2') format('woff2');
    font-display: swap;
    font-weight: 100 900;
  }
</style>

{/* Inline critical CSS */}
<style is:inline>{criticalCSS}</style>

{/* Defer non-critical CSS */}
<link rel="preload" href="/styles/global.css" as="style" onload="this.onload=null;this.rel='stylesheet'" />
<noscript><link rel="stylesheet" href="/styles/global.css" /></noscript>

<link rel="canonical" href={canonicalURL} />
<link rel="sitemap" href="/sitemap-index.xml" />

<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<link rel="apple-touch-icon" href="/favicons/apple-touch-icon.png"/>
<link rel="icon" href="/favicons/favicon.svg" type="image/svg+xml">
<link rel="icon" type="image/png" sizes="32x32" href="/favicons/favicon-32x32.png" />
<link rel="icon" type="image/png" sizes="16x16" href="/favicons/favicon-16x16.png" />
<link rel="mask-icon" href="/favicons/safari-pinned-tab.svg" color="#121212" />
<meta name="msapplication-TileColor" content="#121212" />
<meta name="theme-color" content="#121212" />

<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:site_name" content={SITE.TITLE} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ClientRouter />

{/* Defer non-critical scripts */}
<script is:inline src="https://cdn.jsdelivr.net/npm/theme-change@2.0.2/theme-change.min.js" defer></script>

<script is:inline>
  // Load non-critical CSS
  function loadCSS(href) {
    const link = document.createElement('link');
    link.href = href;
    link.rel = 'stylesheet';
    document.head.appendChild(link);
  }
  
  // Load non-critical CSS after page load
  if (window.requestIdleCallback) {
    window.requestIdleCallback(() => {
      loadCSS('/styles/katex.css');
    });
  } else {
    window.addEventListener('load', () => {
      loadCSS('/styles/katex.css');
    });
  }

  // Theme handling
  function setDarkMode(document) {
    const getThemePreference = () => {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
        return localStorage.getItem('theme')
      }
      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'theme-light'
    }
    const isDark = getThemePreference() === 'dark'
    document.documentElement.classList[isDark ? 'add' : 'remove']('dark')

    if (typeof localStorage !== 'undefined') {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains('dark')
        localStorage.setItem('theme', isDark ? 'dark' : 'theme-light')
      })
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['class'],
      })
    }
  }

  setDarkMode(document)

  document.addEventListener('astro:before-swap', (ev) => {
    setDarkMode(ev.newDocument)
  })
</script>

{/* Load analytics and speed insights after page is interactive */}
<script is:inline>
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadNonCritical);
  } else {
    loadNonCritical();
  }
  
  function loadNonCritical() {
    // Load Umami Analytics
    const umamiScript = document.createElement('script');
    umamiScript.src = 'https://cloud.umami.is/script.js';
    umamiScript.setAttribute('data-website-id', 'd5f41f5f-8925-4e9a-91a1-b7226a775f8a');
    umamiScript.async = true;
    document.head.appendChild(umamiScript);
    
    // Load Vercel Speed Insights
    const speedInsightsScript = document.createElement('script');
    speedInsightsScript.src = 'https://vitals.vercel-insights.com/v1/script.js';
    speedInsightsScript.defer = true;
    document.head.appendChild(speedInsightsScript);
  }
</script>
